#Criar imagem a partir do seu projeto
docker build -t silveira.codes/soat_tech_challenge:1.2.0 .


# fazer download da CLI da mgc
https://docs.magalu.cloud/docs/devops-tools/cli-mgc/how-to/download-and-install

# autenticar com sua conta
mgc auth login

# Criar um novo registro
mgc container-registry registries create --name=soat-challenge-2 --region="br-se1"

# Faça login no Docker para o registry na região desejada, ex:
docker login https://container-registry.br-se1.magalu.cloud

# Marque a imagem local do projeto para o registry:
docker tag soat_tech_challenge:1.2.0 container-registry.br-se1.magalu.cloud/soat-challenge-2/soat_tech_challenge:1.2.0

# Envie (push) a imagem para o registry:
docker push container-registry.br-se1.magalu.cloud/soat-challenge-2/soat_tech_challenge:1.2.0

# Você pode validar o envio da imagem com:
mgc cr registries list --region="br-se1"
mgc cr repositories list --registry-id=3de7d350-e81f-4e79-a1c2-7187988087aa --region="br-se1"
mgc cr images get --registry-id=3de7d350-e81f-4e79-a1c2-7187988087aa --repository-name=silveira.codes/soat_tech_challenge --digest-or-tag=latest

# Vamos criar uma secret para podermos acessar essa imagem,
# primeiro vamos pegar as crendenciais de acesso pela CLI da MGC
mgc container-registry credentials list --region="br-se1"

# Criando a secret:
kubectl create secret docker-registry magalu-registry-secret \
    --docker-server=container-registry.br-se1.magalu.cloud \
    --docker-username=7e57fd48-e242-43b5-89e3-e57c1e18c0aa \
    --docker-password=oo%YFlg7m2dNCL088wunhLZ89#66La4X \
    --docker-email=lucas.luteria@gmail.com
    
#Agora precisamos referenciar esta imagem no depoloyment:
spec:
      containers:
        - name: rails
          # --- Atualize a tag da imagem aqui ---
          image: container-registry.br-se1.magalu.cloud/soat-challenge-2/soat_tech_challenge:1.2.0
          # ------------------------------------
# E no final do arquivo referenciamos as secrets:
      imagePullSecrets:
        - name: magalu-registry-secret

# Com a imagem criada e referenciada agora podemos criar um cluster na mgc 
# Baixamos o kubeconfig com:
mgc kubernetes cluster kubeconfig --cluster-id="uuid"

# Referenciamos este kubeconfig no nosso kubectl:
# 1. Defina a variável de ambiente para incluir o arquivo padrão e o novo
export KUBECONFIG=~/.kube/config:/caminho/para/novo-kubeconfig.yaml

# 2. Mescle tudo e sobrescreva o arquivo padrão (fazendo um backup antes!)
kubectl config view --flatten > ~/.kube/config_temp && mv ~/.kube/config_temp ~/.kube/config

#gerar as secrets para o projeto
kubectl create secret generic db-credentials \
  --from-literal=database_name=soat_challenge_fase_01_development \
  --from-literal=username=postgres \
  --from-literal=password=swordfish5432 \
  --from-literal=database_url=postgresql://postgres:swordfish5432@db:5432/soat_challenge_fase_01_development
  
kubectl create secret generic rails-secrets   --from-literal=master_key=0153f65fd46afa114b8a61056b8c7e5a

kubectl create secret generic ngrok-authtoken-secret --from-literal=authtoken='309alfEseqy1x98a84KM8f7GMBB_6H9tEpkYAKUJqj6ufxuE5'

# Desta forma a configuração se torna permanente e está sempre disponível.

# Agora podemos realizar os deploys e ver nossa aplicação no ar 
kubectl apply -f db-deployment.yaml
kubectl apply -f db-pvc.yaml
kubectl apply -f db-service.yaml

kubectl apply -f ngrok-deployment.yaml
kubectl apply -f ngrok-service.yaml

# verificar url gerada pelo ngrok
https://dashboard.ngrok.com/agents

kubectl create configmap rails-config --from-literal=mercadopago_notification_url='https://da5957917817.ngrok-free.app/'

kubectl apply -f rails-deployment.yaml
kubectl apply -f rails-service.yaml
kubectl apply -f rails-hpa.yaml

